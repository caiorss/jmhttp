#+INCLUDE: theme/theme.org
#+TITLE: jmHttp Server 
#+AUTHOR:  Caio Rodrigues
#+DESCRIPTION: A portable cross-platform http web server for sharing file and directories on Local Network.
#+KEYWRODS: http, web, server, share, files, lan, local, network, java, scala, zeroconf, bonjour, mdns, multicast
#+STARTUP: content 


* jmtthp server - A micro scala/java Http server 
** Overview 

_jmhttp server_ - is a micro self-contained lightweight http server to
share files across local netork. It is useful to access shared files,
musics, pictures and directories from other computers, smartphones,
tablets and so on. This app can also serve static files at local
network· 

Features: 

 - _Self contained_: Just one file, one jar file, self-explanatory and
   easy to use and deploy.

 - _No instalation required+_, it is ready to use and ready to
   go. 

 - _Cross-platform_, as it runs on top of the Java Platform. So this
   server can be run without recompiling and reinstalling on Linux,
   Mac OSX, BSD or Windows.

 - _Serve static website_ - The server can serve a static web site if
   there is any file named index.html at the browsed directory. 

 - _Network service advertising_ - The server can be advertised at
   local network and made discoverable as networks printers, scanners,
   cameras and etc, through zeroconf protocol (aka Apple's
   Bounjour). So it can be located without knowing its network
   address.

 - _SSL/TSL protocol support_ -  TSL (Transport Secure Layer) or SSL
   (Secure Socket Layer). It allows the http traffic between the
   server and browser to be encrypted and secure.

 - _Basic Authenticatin login_ 


*WARNING*: 

 - The HTTP traffic without TLS/SSL is not encrypted, therefore, don't
   use the server without SSL over the internet or at insecure or
   public local networks.

 - Basic Authentication should not be used without TLS/SSL as the
   password and login are sent unencrypted as plain text.

** Usage 
*** Show help

The Jmhttp server is self-explanatory:

#+BEGIN_SRC text
$ bin/jmhttp
A micro Java/Scala http server to share files in the local network

Usage: jmhttp [OPTIONS] ... [[DIRECTORY] | [URL:DIRECTORY] [URL:DIRECTORY] ...]
                                    
   -h, --help                       Display this help and exit
   --version                        Output version information and exit.
   -p, --port=<port>                Port number that the Http server will listen to. Default 8080
   --host=<hostname>                Host name that the server listens to. Default value 0.0.0.0
   --tsl=<<key store>:<password>>   Enable TLS/SSL. If it enabled use https:<addr>:<port> to connect.
   -b, --browser                    Open server url in default web browser.
   -m, --multiple                   Share multiple directories specified by url1:/dir1, url2:/dir2 ...
   --loglevel=<level>               Set application log level. [OFF | ALL | FINE | INFO. (Default value INFO)
   --no-index                       Don't render index.html if available in directory listing.
   --zeroconf                       Publish server at local network with bounjour/zeroconf protocol.

Examples:

  Share single directory /home/user/Documents at default port 8080
  listening all hosts.

   > $ jmhttp /home/user/Documents
  or
   > $ jmhttp ~/Documents

  Share single address and open server's address with system's default web browser.

  > $ jmhttp --browser ~/Documents
  or
  > $ jmhttp -b ~/Documents

  Share single directory using port 9090 - The server can be accessed at url
  http://localhost:9090 or http://<server addr>:9090

   > $ jmhttp --port=9090 /home/user/Documents
   > $ jmhttp -p=9090 /home/user/Documents

  Share multiple directories using port 8090 and announcing server
  through mDNS multicast DNS Discovery service, aka Apple's Bounjour(®)
  or Zeroconf. It will make the directory Documents available at
  http:<addr>:8090/docs and ~/Pictures at http:<addr>:8090/pics. Note:
  the flag (-m) or (--multiple) enables serving multiple directories.

  > $ jmthtp -p=8090 --zeroconf -m docs:~/Documents pics:~/Pictures

  Share multiple directories with tsl/ssl (Transport Socket Layer/
  Secure Socket Layer) encryption. It changes the server's URL to
  https://<serveraddr>:8080. It is no longer http://...

  > $ jmhttp -p=8080 --tsl=CertificateFile.jks:password -m docs:~/Documents pics:~/Pictures

  The certificate can be generated using:

  > $ keytool -gerkey -keyalg RSA -alias sec_server \
    -keystore CertificateFile.jks \
    -storepass chargeit -validity 1000000 -keysize 2048


#+END_SRC

*** Running the server 

By default, the server binds to port 8080. To change it to another port
run with -p=<port number>, for instance, -p=9090 to bind to port 9090.

*Example 1*

Share the directory /home/archbox/test to ~/test binding
the server to port 8080. The shared directory can accessed at
http://192.168.1.22:8080 URL.

#+BEGIN_SRC sh 
$ bin/jmhttp /home/archbox/test/
Server running at: http://192.168.0.3:8080
[2017-11-08 13:59:02] [INFO] - jmhttp.server.HttpServer run
 - Starting server at host = 0.0.0.0 and port = 8080 


[2017-11-08 13:59:33] [INFO] - jmhttp.server.HttpServer $anonfun$run$2
 - HTTP Request: path = / - method = GET - address = /0:0:0:0:0:0:0:1 

[2017-11-08 13:59:33] [INFO] - jmhttp.server.HttpServer $anonfun$run$2
 - HTTP Request: path = /favicon.ico - method = GET - address = /0:0:0:0:0:0:0:1 

... ... ... ... 

#+END_SRC

[[file:images/screenshot1.png][file:images/screenshot1.png]] 

[[file:images/screenshot2.png][file:images/screenshot2.png]]

On windows this sever can be run with: 

#+BEGIN_SRC sh 
$ java -jar jmhttp C:\Users\arch\desktop
#+END_SRC

*Example 2*

Changing the port that server listen run:

#+BEGIN_SRC sh 
  $ jmhttp -p=9090 /home/archbox/test/
  Server running at: http://192.168.0.3:9090
  [2017-11-08 14:00:43] [INFO] - jmhttp.server.HttpServer run
   - Starting server at host = 0.0.0.0 and port = 9090 

  [2017-11-08 14:00:58] [INFO] - jmhttp.server.HttpServer $anonfun$run$2
   - HTTP Request: path = /readerMonad.org - method = GET - address = /0:0:0:0:0:0:0:1 

  [2017-11-08 14:00:58] [INFO] - jmhttp.server.HttpServer $anonfun$run$2
   - HTTP Request: path = /favicon.ico - method = GET - address = /0:0:0:0:0:0:0:1 


#+END_SRC

*Example 3*

Open the server website in the default browser after the server
start. It will open the server website at  http://192.168.0.3:9090

#+BEGIN_SRC sh 
$ bin/jmhttp --browser -p=9090 /home/archbox/test/
Server running at: http://192.168.0.3:9090
[2017-11-08 14:02:21] [INFO] - jmhttp.server.HttpServer run
 - Starting server at host = 0.0.0.0 and port = 9090 

# Or 

$ jmhttp --b -p=9090 /home/archbox/test/
Server running at: http://192.168.1.22:9090

#+END_SRC

*Example 4*

Sharing multiple directories: 

It will make the directory contents of /home/archbox/opt be available
at the URL  http://192.168.1.22:8080/opt and the directory contents of
/home/archbox/Documents/wiki  be available at http://192.168.1.22:8080/org. 
If there is any file named index.html in the wiki directory, it will
be displayed instead of showing the directory contents.

#+BEGIN_SRC sh 
$ bin/jmhttp -m -b opt:/home/archbox/opt pics:/home/archbox/Pictures org:/home/archbox/Documents/wiki 
Server running at: http://192.168.1.22:8080

#+END_SRC

[[file:images/screenshot3-shared-dirs.png][file:images/screenshot3-shared-dirs.png]]

[[file:images/screenshot4-index.png][file:images/screenshot4-index.png]]


*Example 5* 

Too advertising the server at local network with multicast-DNS, zeroconf
(that Apple calls Boujour) just add the flag --zeroconf. 


#+BEGIN_SRC sh 
 $ bin/jmhttp --zeroconf -p=9090 -m -b opt:/home/archbox/opt pics:/home/archbox/Pictures org:/home/archbox/Documents/wiki 
#+END_SRC

The advertising with zeroconf allows the server to be accessed without
knowing or typing its IP address by using any Zeroconf browser,
android app with zeroconf for network service discovery or Mac OSX
Safari Zeroconf.

[[file:images/screenshot5-mac-osx-bounjour.png][file:images/screenshot5-mac-osx-bounjour.png]]

** Building Instructions 

The server requires scala as building dependency and  [[https://github.com/caiorss/jarget][jarget]]  building
tool to fetch the dependencies and bundle them with the application.

To get jarget, just run: 

#+BEGIN_SRC sh 
$ curl -o ~/bin/jarget -L https://github.com/caiorss/jarget/raw/v2.1.0-beta-release/jarget && chmod +x ~/bin/jarget 
#+END_SRC

To build the server run: 

#+BEGIN_SRC sh 
$ make force && make sh-guard 
#+END_SRC

It will generate an unix-executable uber jar, namely "bin/jmhttp"

#+BEGIN_SRC sh 
  $ bin/jmhttp 
  A micro Java/Scala http server to share files in the local network

  Usage: jmhttp [OPTIONS] ... [[DIRECTORY] | [URL:DIRECTORY] [URL:DIRECTORY] ...]
      
     ... ... ... ... ... ... ... ...... ... ... ...


  $ java -jar bin/jmhttp
  A micro Java/Scala http server to share files in the local network

  Usage: jmhttp [OPTIONS] ... [[DIRECTORY] | [URL:DIRECTORY] [URL:DIRECTORY] ...]
                          
     -h, --help           Display this help and exit
     ... ... ... ... ... ... ... ...... ... ... ...

     
  $ file bin/jmhttp 
  bin/jmhttp: a /usr/bin/env sh  script executable (binary data)

  $ du -h bin/jmhttp
  1.7M    bin/jmhttp
  1.7M    total

#+END_SRC

After building the jarget cache can be removed: 

#+BEGIN_SRC sh 
$ jarget cache -jars 
/home/archbox/.jarget/cache/javax/jmdns/jmdns/3.4.1/jmdns-3.4.1.jar

$ jarget cache -path
/home/archbox/.jarget/cache

$ rm -rf /home/archbox/.jarget 
#+END_SRC

** Binary release 

The most update version can be downloaded from the link below or using
curl. 

 - Most up to date version [[%20https://github.com/caiorss/jmhttp/raw/gh-pages/jmhttp][jmhttp - Download]]

 - [[https://github.com/caiorss/jmhttp/raw/v1.0-release/jmhttp][jmhttp 1.0 Download]]

 - [[https://github.com/caiorss/jmhttp/raw/1feb4ef04f15d8e8c4676f39b495b2eac4b8f473/jmhttp][jmhttp 1.1 Download]]

#+BEGIN_SRC sh 
$ curl -O -L https://github.com/caiorss/jmhttp/raw/gh-pages/jmhttp
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   130  100   130    0     0     21      0  0:00:06  0:00:06 --:--:--    42
100 1703k  100 1703k    0     0   121k      0  0:00:14  0:00:14 --:--:--  475k

$ chmod +x jmhttp

$ ./jmhttp --version
jmhttp - v1.0

$ java -jar ./jmhttp --version
jmhttp - v1.0

$ sh ./jmhttp --version
jmhttp - v1.0

#+END_SRC

** TODO Tasklist and future work 

 - [X] - Implement logging

 - [X] - Implement a consistent command line handling.

 - [X] - Add Zeroconf - Network Service advertising.

 - [ ] - Add basic HTTP authentication.

 - [ ] - Add cookie-based authentication.

 - [X] - Supoport HTTPS/TLS security extension.

 - [ ] - Provide GIT-like subcommands.

 - [ ] - [MAYBE] GUI - Graphical User Interface 

